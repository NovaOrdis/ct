#!/usr/bin/env bash

function display-usage() {

cat <<EOF

Container Tool (ct).

A bash-based tool that implements often-used patterns for interacting with local continers.
Think about it as shortcuts or aliases.

Usage:

    ct <command> [command-args]

Commands:

    attach - exec a bash into the newest container.

        -u <uid> Use the specified UID when attaching.

EOF
}

function main() {

    local command

    while [ -n "$1" ]; do

        if [ "--help" == "$1" ]; then

            display-usage;
            exit 0;

        elif [ "-v" == "$1" ]; then

            export VERBOSE=true;

        elif [[ -z ${command} ]]; then

            command=$1;
            shift;
            break;
        fi

        shift
    done

    [[ -z ${command} ]] && { display-usage; exit 1; }

    ${command} "$@"
}

function debug() {

  ${VERBOSE} && echo "$@" 1>&2;

}

function error() {

    echo "[error]: $@" 1>&2;
}

function attach() {

    local uid

    while [ -n "$1" ]; do

        if [ "$1" = "-u" ]; then
            shift
            uid=$1
        fi

        shift;
    done

    local tcid

    for cid in $(docker ps -q); do

        [[ -n ${tcid} ]] && { error "more than one containers are running"; return 1; }

        tcid=${cid}
    done

    local uid_arg

    if [ -n "${uid}" ]; then

        uid_arg="-u ${uid}"
        uid_message="as UID ${uid} "
    fi

    echo "attaching to the newest container (${tcid}) ${uid_message}..."

    docker exec -it ${uid_arg} ${tcid} bash
}
